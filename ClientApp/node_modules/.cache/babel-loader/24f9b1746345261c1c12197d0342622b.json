{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Latf\\\\innorik\\\\ClientApp\\\\src\\\\GlobalContext\\\\GlobalContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initState = {\n  isLogin: false\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ISLOGIN\":\n      return { ...state,\n        isLogin: action.payload\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport const GlobalContext = /*#__PURE__*/createContext();\nexport const GlobalContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  const isLoginHandler = data => {\n    dispatch({\n      type: \"ISLOGIN\",\n      payload: data\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      isLogin: state.isLogin,\n      isLoginHandler\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalContextProvider, \"ivzsx5aR9qRFuEtyOcndflQiQ1Q=\");\n\n_c = GlobalContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"names":["React","useReducer","createContext","initState","isLogin","reducer","state","action","type","payload","GlobalContext","GlobalContextProvider","children","dispatch","isLoginHandler","data"],"sources":["C:/Users/Latf/innorik/ClientApp/src/GlobalContext/GlobalContext.js"],"sourcesContent":["import React, { useReducer, createContext } from \"react\";\n\nconst initState = {\n  isLogin: false,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ISLOGIN\":\n      return { ...state, isLogin: action.payload };\n      \n    default:\n      return { ...state };\n  }\n};\n\nexport const GlobalContext = createContext();\n\nexport const GlobalContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  const isLoginHandler = (data) => {\n    dispatch({\n      type: \"ISLOGIN\",\n      payload: data,\n    });\n  };\n\n  return (\n    <GlobalContext.Provider value={{ isLogin: state.isLogin, isLoginHandler }}>\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;;AAEA,MAAMC,SAAS,GAAG;EAChBC,OAAO,EAAE;AADO,CAAlB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACjC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,SAAL;MACE,OAAO,EAAE,GAAGF,KAAL;QAAYF,OAAO,EAAEG,MAAM,CAACE;MAA5B,CAAP;;IAEF;MACE,OAAO,EAAE,GAAGH;MAAL,CAAP;EALJ;AAOD,CARD;;AAUA,OAAO,MAAMI,aAAa,gBAAGR,aAAa,EAAnC;AAEP,OAAO,MAAMS,qBAAqB,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACrD,MAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBZ,UAAU,CAACI,OAAD,EAAUF,SAAV,CAApC;;EAEA,MAAMW,cAAc,GAAIC,IAAD,IAAU;IAC/BF,QAAQ,CAAC;MACPL,IAAI,EAAE,SADC;MAEPC,OAAO,EAAEM;IAFF,CAAD,CAAR;EAID,CALD;;EAOA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAAEX,OAAO,EAAEE,KAAK,CAACF,OAAjB;MAA0BU;IAA1B,CAA/B;IAAA,UACGF;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAfM;;GAAMD,qB;;KAAAA,qB"},"metadata":{},"sourceType":"module"}