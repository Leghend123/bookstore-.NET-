{"ast":null,"code":"/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n * @public\n */\nvar parse_1 = parse;\nvar serialize_1 = serialize;\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString;\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {};\n  var opt = options || {};\n  var dec = opt.decode || decode;\n  var index = 0;\n\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index); // no more cookie pairs\n\n    if (eqIdx === -1) {\n      break;\n    }\n\n    var endIdx = str.indexOf(';', index);\n\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n\n    var key = str.slice(index, eqIdx).trim(); // only assign once\n\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim(); // quoted values\n\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1;\n  }\n\n  return obj;\n}\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid');\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires;\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.partitioned) {\n    str += '; Partitioned';\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string' ? opt.priority.toLowerCase() : opt.priority;\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low';\n        break;\n\n      case 'medium':\n        str += '; Priority=Medium';\n        break;\n\n      case 'high':\n        str += '; Priority=High';\n        break;\n\n      default:\n        throw new TypeError('option priority is invalid');\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n\n      case 'none':\n        str += '; SameSite=None';\n        break;\n\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\n\nfunction decode(str) {\n  return str.indexOf('%') !== -1 ? decodeURIComponent(str) : str;\n}\n/**\n * URL-encode value.\n *\n * @param {string} val\n * @returns {string}\n */\n\n\nfunction encode(val) {\n  return encodeURIComponent(val);\n}\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\n\nfunction isDate(val) {\n  return __toString.call(val) === '[object Date]' || val instanceof Date;\n}\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n\nfunction hasDocumentCookie() {\n  const testingValue = typeof global === 'undefined' ? undefined : global.TEST_HAS_DOCUMENT_COOKIE;\n\n  if (typeof testingValue === 'boolean') {\n    return testingValue;\n  } // Can we get/set cookies on document.cookie?\n\n\n  return typeof document === 'object' && typeof document.cookie === 'string';\n}\n\nfunction parseCookies(cookies) {\n  if (typeof cookies === 'string') {\n    return parse_1(cookies);\n  } else if (typeof cookies === 'object' && cookies !== null) {\n    return cookies;\n  } else {\n    return {};\n  }\n}\n\nfunction readCookie(value) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const cleanValue = cleanupCookieValue(value);\n\n  if (!options.doNotParse) {\n    try {\n      return JSON.parse(cleanValue);\n    } catch (e) {// At least we tried\n    }\n  } // Ignore clean value if we failed the deserialization\n  // It is not relevant anymore to trim those values\n\n\n  return value;\n}\n\nfunction cleanupCookieValue(value) {\n  // express prepend j: before serializing a cookie\n  if (value && value[0] === 'j' && value[1] === ':') {\n    return value.substr(2);\n  }\n\n  return value;\n}\n\nclass Cookies {\n  constructor(cookies) {\n    let defaultSetOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.changeListeners = [];\n    this.HAS_DOCUMENT_COOKIE = false;\n\n    this.update = () => {\n      if (!this.HAS_DOCUMENT_COOKIE) {\n        return;\n      }\n\n      const previousCookies = this.cookies;\n      this.cookies = parse_1(document.cookie);\n\n      this._checkChanges(previousCookies);\n    };\n\n    const domCookies = typeof document === 'undefined' ? '' : document.cookie;\n    this.cookies = parseCookies(cookies || domCookies);\n    this.defaultSetOptions = defaultSetOptions;\n    this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\n  }\n\n  _emitChange(params) {\n    for (let i = 0; i < this.changeListeners.length; ++i) {\n      this.changeListeners[i](params);\n    }\n  }\n\n  _checkChanges(previousCookies) {\n    const names = new Set(Object.keys(previousCookies).concat(Object.keys(this.cookies)));\n    names.forEach(name => {\n      if (previousCookies[name] !== this.cookies[name]) {\n        this._emitChange({\n          name,\n          value: readCookie(this.cookies[name])\n        });\n      }\n    });\n  }\n\n  _startPolling() {\n    this.pollingInterval = setInterval(this.update, 300);\n  }\n\n  _stopPolling() {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n  }\n\n  get(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!options.doNotUpdate) {\n      this.update();\n    }\n\n    return readCookie(this.cookies[name], options);\n  }\n\n  getAll() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!options.doNotUpdate) {\n      this.update();\n    }\n\n    const result = {};\n\n    for (let name in this.cookies) {\n      result[name] = readCookie(this.cookies[name], options);\n    }\n\n    return result;\n  }\n\n  set(name, value, options) {\n    if (options) {\n      options = Object.assign(Object.assign({}, this.defaultSetOptions), options);\n    } else {\n      options = this.defaultSetOptions;\n    }\n\n    const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n    this.cookies = Object.assign(Object.assign({}, this.cookies), {\n      [name]: stringValue\n    });\n\n    if (this.HAS_DOCUMENT_COOKIE) {\n      document.cookie = serialize_1(name, stringValue, options);\n    }\n\n    this._emitChange({\n      name,\n      value,\n      options\n    });\n  }\n\n  remove(name, options) {\n    const finalOptions = options = Object.assign(Object.assign(Object.assign({}, this.defaultSetOptions), options), {\n      expires: new Date(1970, 1, 1, 0, 0, 1),\n      maxAge: 0\n    });\n    this.cookies = Object.assign({}, this.cookies);\n    delete this.cookies[name];\n\n    if (this.HAS_DOCUMENT_COOKIE) {\n      document.cookie = serialize_1(name, '', finalOptions);\n    }\n\n    this._emitChange({\n      name,\n      value: undefined,\n      options\n    });\n  }\n\n  addChangeListener(callback) {\n    this.changeListeners.push(callback);\n\n    if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 1) {\n      if (typeof window === 'object' && 'cookieStore' in window) {\n        window.cookieStore.addEventListener('change', this.update);\n      } else {\n        this._startPolling();\n      }\n    }\n  }\n\n  removeChangeListener(callback) {\n    const idx = this.changeListeners.indexOf(callback);\n\n    if (idx >= 0) {\n      this.changeListeners.splice(idx, 1);\n    }\n\n    if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 0) {\n      if (typeof window === 'object' && 'cookieStore' in window) {\n        window.cookieStore.removeEventListener('change', this.update);\n      } else {\n        this._stopPolling();\n      }\n    }\n  }\n\n}\n\nexport { Cookies as default };","map":{"version":3,"names":["parse_1","parse","serialize_1","serialize","__toString","Object","prototype","toString","fieldContentRegExp","str","options","TypeError","obj","opt","dec","decode","index","length","eqIdx","indexOf","endIdx","lastIndexOf","key","slice","trim","undefined","val","charCodeAt","tryDecode","name","enc","encode","test","value","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","isDate","valueOf","toUTCString","httpOnly","secure","partitioned","priority","toLowerCase","sameSite","decodeURIComponent","encodeURIComponent","call","Date","e","hasDocumentCookie","testingValue","global","TEST_HAS_DOCUMENT_COOKIE","document","cookie","parseCookies","cookies","readCookie","cleanValue","cleanupCookieValue","doNotParse","JSON","substr","Cookies","constructor","defaultSetOptions","changeListeners","HAS_DOCUMENT_COOKIE","update","previousCookies","_checkChanges","domCookies","_emitChange","params","i","names","Set","keys","concat","forEach","_startPolling","pollingInterval","setInterval","_stopPolling","clearInterval","get","doNotUpdate","getAll","result","set","assign","stringValue","stringify","remove","finalOptions","addChangeListener","callback","push","window","cookieStore","addEventListener","removeChangeListener","idx","splice","removeEventListener","default"],"sources":["C:/Users/Latf/innorik/ClientApp/node_modules/universal-cookie/esm/index.mjs"],"sourcesContent":["/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n * @public\n */\n\nvar parse_1 = parse;\nvar serialize_1 = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {};\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0;\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index);\n\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1;\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires;\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.partitioned) {\n    str += '; Partitioned';\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority;\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low';\n        break\n      case 'medium':\n        str += '; Priority=Medium';\n        break\n      case 'high':\n        str += '; Priority=High';\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} val\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n\nfunction hasDocumentCookie() {\n    const testingValue = typeof global === 'undefined'\n        ? undefined\n        : global.TEST_HAS_DOCUMENT_COOKIE;\n    if (typeof testingValue === 'boolean') {\n        return testingValue;\n    }\n    // Can we get/set cookies on document.cookie?\n    return typeof document === 'object' && typeof document.cookie === 'string';\n}\nfunction parseCookies(cookies) {\n    if (typeof cookies === 'string') {\n        return parse_1(cookies);\n    }\n    else if (typeof cookies === 'object' && cookies !== null) {\n        return cookies;\n    }\n    else {\n        return {};\n    }\n}\nfunction readCookie(value, options = {}) {\n    const cleanValue = cleanupCookieValue(value);\n    if (!options.doNotParse) {\n        try {\n            return JSON.parse(cleanValue);\n        }\n        catch (e) {\n            // At least we tried\n        }\n    }\n    // Ignore clean value if we failed the deserialization\n    // It is not relevant anymore to trim those values\n    return value;\n}\nfunction cleanupCookieValue(value) {\n    // express prepend j: before serializing a cookie\n    if (value && value[0] === 'j' && value[1] === ':') {\n        return value.substr(2);\n    }\n    return value;\n}\n\nclass Cookies {\n    constructor(cookies, defaultSetOptions = {}) {\n        this.changeListeners = [];\n        this.HAS_DOCUMENT_COOKIE = false;\n        this.update = () => {\n            if (!this.HAS_DOCUMENT_COOKIE) {\n                return;\n            }\n            const previousCookies = this.cookies;\n            this.cookies = parse_1(document.cookie);\n            this._checkChanges(previousCookies);\n        };\n        const domCookies = typeof document === 'undefined' ? '' : document.cookie;\n        this.cookies = parseCookies(cookies || domCookies);\n        this.defaultSetOptions = defaultSetOptions;\n        this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\n    }\n    _emitChange(params) {\n        for (let i = 0; i < this.changeListeners.length; ++i) {\n            this.changeListeners[i](params);\n        }\n    }\n    _checkChanges(previousCookies) {\n        const names = new Set(Object.keys(previousCookies).concat(Object.keys(this.cookies)));\n        names.forEach((name) => {\n            if (previousCookies[name] !== this.cookies[name]) {\n                this._emitChange({\n                    name,\n                    value: readCookie(this.cookies[name]),\n                });\n            }\n        });\n    }\n    _startPolling() {\n        this.pollingInterval = setInterval(this.update, 300);\n    }\n    _stopPolling() {\n        if (this.pollingInterval) {\n            clearInterval(this.pollingInterval);\n        }\n    }\n    get(name, options = {}) {\n        if (!options.doNotUpdate) {\n            this.update();\n        }\n        return readCookie(this.cookies[name], options);\n    }\n    getAll(options = {}) {\n        if (!options.doNotUpdate) {\n            this.update();\n        }\n        const result = {};\n        for (let name in this.cookies) {\n            result[name] = readCookie(this.cookies[name], options);\n        }\n        return result;\n    }\n    set(name, value, options) {\n        if (options) {\n            options = Object.assign(Object.assign({}, this.defaultSetOptions), options);\n        }\n        else {\n            options = this.defaultSetOptions;\n        }\n        const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n        this.cookies = Object.assign(Object.assign({}, this.cookies), { [name]: stringValue });\n        if (this.HAS_DOCUMENT_COOKIE) {\n            document.cookie = serialize_1(name, stringValue, options);\n        }\n        this._emitChange({ name, value, options });\n    }\n    remove(name, options) {\n        const finalOptions = (options = Object.assign(Object.assign(Object.assign({}, this.defaultSetOptions), options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 }));\n        this.cookies = Object.assign({}, this.cookies);\n        delete this.cookies[name];\n        if (this.HAS_DOCUMENT_COOKIE) {\n            document.cookie = serialize_1(name, '', finalOptions);\n        }\n        this._emitChange({ name, value: undefined, options });\n    }\n    addChangeListener(callback) {\n        this.changeListeners.push(callback);\n        if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 1) {\n            if (typeof window === 'object' && 'cookieStore' in window) {\n                window.cookieStore.addEventListener('change', this.update);\n            }\n            else {\n                this._startPolling();\n            }\n        }\n    }\n    removeChangeListener(callback) {\n        const idx = this.changeListeners.indexOf(callback);\n        if (idx >= 0) {\n            this.changeListeners.splice(idx, 1);\n        }\n        if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 0) {\n            if (typeof window === 'object' && 'cookieStore' in window) {\n                window.cookieStore.removeEventListener('change', this.update);\n            }\n            else {\n                this._stopPolling();\n            }\n        }\n    }\n}\n\nexport { Cookies as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}